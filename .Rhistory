tau.cf = predict(cf, X.test)$predictions
bout = capture.output(tau.bart <- bart.cate.crossfit(X, Y, W, X.test))
RESP = Y - cf$Y.hat
R.mat = cbind(1, W - prob,
(W - prob) * tau.cf.oob,
(W - prob) * tau.bart$train.preds)
stack = nnls(R.mat, RESP, constrained = c(FALSE, FALSE, TRUE, TRUE))
print("coefs")
print(stack)
tau.stack = stack[2] +
stack[3] * tau.cf +
stack[4] * tau.bart$test.preds
out = c(var(tau.test),
mean((tau.cf - tau.test)^2),
mean((tau.bart$test.preds - tau.test)^2),
mean((tau.stack - tau.test)^2))
print("mse")
print(out)
out
})
print(paste("RESULTS FOR SIGMA", sigma))
print(rowMeans(results))
results
}
o
source("scripts/stacking/lib.R")
all.results <- foreach(sigma = sigmas) %dopar% {
# all.results <- foreach(sigma = sigmas) {
source("scripts/stacking/lib.R")
results = replicate(NREP, {
X = matrix(rnorm(n*p), n, p)
W = rbinom(n, 1, prob)
mu0 = apply(X, 1, mufn)
tau.train = apply(X, 1, taufn)
Y = mu0 + W * tau.train + sigma * rnorm(n)
n.test = n + 1
X.test = matrix(rnorm(n.test*p), n.test, p)
tau.test = apply(X.test, 1, taufn)
cf = causal_forest(X, Y, W, W.hat = prob, tune.parameters = NULL)
tau.cf.oob = predict(cf)$predictions
tau.cf = predict(cf, X.test)$predictions
bout = capture.output(tau.bart <- bart.cate.crossfit(X, Y, W, X.test))
RESP = Y - cf$Y.hat
R.mat = cbind(1, W - prob,
(W - prob) * tau.cf.oob,
(W - prob) * tau.bart$train.preds)
stack = nnls(R.mat, RESP, constrained = c(FALSE, FALSE, TRUE, TRUE))
print("coefs")
print(stack)
tau.stack = stack[2] +
stack[3] * tau.cf +
stack[4] * tau.bart$test.preds
out = c(var(tau.test),
mean((tau.cf - tau.test)^2),
mean((tau.bart$test.preds - tau.test)^2),
mean((tau.stack - tau.test)^2))
print("mse")
print(out)
out
})
print(paste("RESULTS FOR SIGMA", sigma))
print(rowMeans(results))
results
}
parallel::stopCluster(cl)
save.image("results/stacking_test.RData")
all.results
# sigmas = c(0.25, 0.5, 0.75, 1, 1.5, 2, 3, 4)
sigmas <- c(0.25, 1, 2, 4)
in_use = 1:4
results_a = Reduce(rbind, lapply(all.results, rowMeans))
sd_a = Reduce(rbind, lapply(all.results, function(xx) apply(xx, 1, sd))) / sqrt(NREP)
to_plot_a = data.frame(sigmas[in_use], sqrt(results_a[in_use, 2:4]))
names(to_plot_a) = c("Sigma", "CF", "BART", "STACK")
raw_a = sqrt(mean(results_a[,1]))
rm(list = ls())
library(foreach)
taufn = function(xx) { 1 / (1 + exp(xx[1] - xx[2])) }
mufn = function(xx) { 3 / (1 + exp(-xx[2] + xx[3])) }
prob = 0.5
p = 10
n = 1000#0
#sigmas = c(0.25, 0.5, 0.75, 1, 1.5, 2, 3, 4)
sigmas <- c(0.25, 1, 2, 4)
NREP = 10 # 50
cl <- parallel::makeCluster(length(sigmas))
doParallel::registerDoParallel(cl)
all.results <- foreach(sigma = sigmas) %dopar% {
# all.results <- foreach(sigma = sigmas) {
source("scripts/stacking/lib.R")
results = replicate(NREP, {
X = matrix(rnorm(n*p), n, p)
W = rbinom(n, 1, prob)
mu0 = apply(X, 1, mufn)
tau.train = apply(X, 1, taufn)
Y = mu0 + W * tau.train + sigma * rnorm(n)
n.test = n + 1
X.test = matrix(rnorm(n.test*p), n.test, p)
tau.test = apply(X.test, 1, taufn)
cf = causal_forest(X, Y, W, W.hat = prob, tune.parameters = NULL)
tau.cf.oob = predict(cf)$predictions
tau.cf = predict(cf, X.test)$predictions
bout = capture.output(tau.bart <- bart.cate.crossfit(X, Y, W, X.test))
RESP = Y - cf$Y.hat
R.mat = cbind(1, W - prob,
(W - prob) * tau.cf.oob,
(W - prob) * tau.bart$train.preds)
stack = nnls(R.mat, RESP, constrained = c(FALSE, FALSE, TRUE, TRUE))
print("coefs")
print(stack)
tau.stack = stack[2] +
stack[3] * tau.cf +
stack[4] * tau.bart$test.preds
out = c(var(tau.test),
mean((tau.cf - tau.test)^2),
mean((tau.bart$test.preds - tau.test)^2),
mean((tau.stack - tau.test)^2))
print("mse")
print(out)
out
})
print(paste("RESULTS FOR SIGMA", sigma))
print(rowMeans(results))
results
}
parallel::stopCluster(cl)
save.image("results/stacking_test_B.RData")
library(RColorBrewer)
library(latex2exp)
# sigmas = c(0.25, 0.5, 0.75, 1, 1.5, 2, 3, 4)
sigmas <- c(0.25, 1, 2, 4)
in_use = 1:4
load("results/stacking_test.RData")
results_a = Reduce(rbind, lapply(all.results, rowMeans))
sd_a = Reduce(rbind, lapply(all.results, function(xx) apply(xx, 1, sd))) / sqrt(NREP)
load("stacking_test_B.RData")
results_b = Reduce(rbind, lapply(all.results, rowMeans))
load("results/stacking_test_B.RData")
results_b = Reduce(rbind, lapply(all.results, rowMeans))
sd_b = Reduce(rbind, lapply(all.results, function(xx) apply(xx, 1, sd))) / sqrt(NREP)
to_plot_a = data.frame(sigmas[in_use], sqrt(results_a[in_use, 2:4]))
names(to_plot_a) = c("Sigma", "CF", "BART", "STACK")
to_plot_b = data.frame(sigmas[in_use], sqrt(results_b[in_use, 2:4]))
names(to_plot_b) = c("Sigma", "CF", "BART", "STACK")
raw_a = sqrt(mean(results_a[,1]))
raw_b = sqrt(mean(results_b[,1]))
rng = range(c(to_plot_a[,2:4], to_plot_b[,2:4], raw_a, raw_b))
cols = brewer.pal(3, "Set1")
pdf("figures/rstack_sharp.pdf")
dev.off()
pdf("figures/rstack_discontinuous.pdf")
pardef = par(xpd = FALSE, mar = c(4.5, 5, 3, 3) + 0.5, cex.lab=1.4, cex.axis=1.4, cex.main=1.4, cex.sub=1.4)
plot(to_plot_a$sigma, to_plot_a$CF, xlab = TeX('Noise level $\\sigma$'), ylab = "RMSE",
log = "xy", ylim = rng, col = cols[1], pch = 15, cex = 1.75)
dev.off()
pdf("figures/rstack_discontinuous.pdf")
pardef = par(xpd = FALSE, mar = c(4.5, 5, 3, 3) + 0.5, cex.lab=1.4, cex.axis=1.4, cex.main=1.4, cex.sub=1.4)
plot(to_plot_a$sigma, to_plot_a$CF, xlab = TeX('Noise level'), ylab = "RMSE",
log = "xy")#, ylim = rng, col = cols[1], pch = 15, cex = 1.75)
to_plot_a$CF
to_plot_a$sigma
to_plot_a
plot(to_plot_a$Sigma, to_plot_a$CF, xlab = TeX('Noise level'), ylab = "RMSE",
log = "xy")#, ylim = rng, col = cols[1], pch = 15, cex = 1.75)
lines(to_plot_a$sigma, to_plot_a$CF)#, col = cols[1])
points(to_plot_a$sigma, to_plot_a$BART)#, col = cols[2], pch = 16, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$CF)#, col = cols[1])
points(to_plot_a$Sigma, to_plot_a$BART)#, col = cols[2], pch = 16, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$BART)#, col = cols[2])
points(to_plot_a$Sigma, to_plot_a$STACK)#, col = cols[3], pch = 17, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$STACK)#, col = cols[3])
abline(h = raw_a, lty = 3, lwd = 2)
legend("bottomright", c("CF", "BART", "R-stack"))
#lty = 1, col = cols, pch = 15:17, pt.cex = 1.75, cex = 1.4)
par = pardef
dev.off()
pdf("figures/rstack_discontinuous.pdf")
pardef = par(xpd = FALSE, mar = c(4.5, 5, 3, 3) + 0.5, cex.lab=1.4, cex.axis=1.4, cex.main=1.4, cex.sub=1.4)
plot(to_plot_a$Sigma, to_plot_a$CF, xlab = TeX('Noise level'), ylab = "RMSE",
log = "xy",col = cols[1])#, pch = 15, cex = 1.75) # ylim = rng,
lines(to_plot_a$Sigma, to_plot_a$CF, col = cols[1])
points(to_plot_a$Sigma, to_plot_a$BART, col = cols[2])#, pch = 16, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$BART, col = cols[2])
points(to_plot_a$Sigma, to_plot_a$STACK, col = cols[3])#, pch = 17, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$STACK, col = cols[3])
abline(h = raw_a, lty = 3, lwd = 2)
legend("bottomright", c("CF", "BART", "R-stack"))
#lty = 1, col = cols, pch = 15:17, pt.cex = 1.75, cex = 1.4)
par = pardef
dev.off()
pdf("figures/rstack_discontinuous.pdf")
pardef = par(xpd = FALSE, mar = c(4.5, 5, 3, 3) + 0.5, cex.lab=1.4, cex.axis=1.4, cex.main=1.4, cex.sub=1.4)
plot(to_plot_a$Sigma, to_plot_a$CF, xlab = TeX('Noise level'), ylab = "RMSE",
log = "y",col = cols[1])#, pch = 15, cex = 1.75) # ylim = rng,
lines(to_plot_a$Sigma, to_plot_a$CF, col = cols[1])
points(to_plot_a$Sigma, to_plot_a$BART, col = cols[2])#, pch = 16, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$BART, col = cols[2])
points(to_plot_a$Sigma, to_plot_a$STACK, col = cols[3])#, pch = 17, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$STACK, col = cols[3])
abline(h = raw_a, lty = 3, lwd = 2)
legend("bottomright", c("CF", "BART", "R-stack"))
#lty = 1, col = cols, pch = 15:17, pt.cex = 1.75, cex = 1.4)
par = pardef
dev.off()
pdf("figures/rstack_discontinuous.pdf")
pardef = par(xpd = FALSE, mar = c(4.5, 5, 3, 3) + 0.5, cex.lab=1.4, cex.axis=1.4, cex.main=1.4, cex.sub=1.4)
plot(to_plot_a$Sigma, to_plot_a$CF, xlab = TeX('Noise level'), ylab = "RMSE",
log = "xy",col = cols[1])#, pch = 15, cex = 1.75) # ylim = rng,
lines(to_plot_a$Sigma, to_plot_a$CF, col = cols[1])
points(to_plot_a$Sigma, to_plot_a$BART, col = cols[2])#, pch = 16, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$BART, col = cols[2])
points(to_plot_a$Sigma, to_plot_a$STACK, col = cols[3])#, pch = 17, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$STACK, col = cols[3])
abline(h = raw_a, lty = 3, lwd = 2)
legend("bottomright", c("CF", "BART", "R-stack"),
lty = 1, col = cols)#, pch = 15:17, pt.cex = 1.75, cex = 1.4)
par = pardef
dev.off()
pdf("figures/rstack_discontinuous.pdf")
pardef = par(xpd = FALSE, mar = c(4.5, 5, 3, 3) + 0.5, cex.lab=1.4, cex.axis=1.4, cex.main=1.4, cex.sub=1.4)
plot(to_plot_a$Sigma, to_plot_a$CF, xlab = TeX('Noise level'), ylab = "RMSE",
log = "xy",col = cols[1])#, pch = 15, cex = 1.75) # ylim = rng,
lines(to_plot_a$Sigma, to_plot_a$CF, col = cols[1])
points(to_plot_a$Sigma, to_plot_a$BART, col = cols[2])#, pch = 16, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$BART, col = cols[2])
points(to_plot_a$Sigma, to_plot_a$STACK, col = cols[3])#, pch = 17, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$STACK, col = cols[3])
abline(h = raw_a, lty = 3, lwd = 2)
legend("bottomright", c("CF", "BART", "R-stack"),
lty = 1, col = cols, pch = 1 )# 15:17)#, pt.cex = 1.75, cex = 1.4)
par = pardef
dev.of
e
pdf("figures/rstack_discontinuous.pdf")
pardef = par(xpd = FALSE, mar = c(4.5, 5, 3, 3) + 0.5, cex.lab=1.4, cex.axis=1.4, cex.main=1.4, cex.sub=1.4)
plot(to_plot_a$Sigma, to_plot_a$CF, xlab = TeX('Noise level'), ylab = "RMSE",
log = "xy",col = cols[1])#, pch = 15, cex = 1.75) # ylim = rng,
lines(to_plot_a$Sigma, to_plot_a$CF, col = cols[1])
points(to_plot_a$Sigma, to_plot_a$BART, col = cols[2])#, pch = 16, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$BART, col = cols[2])
points(to_plot_a$Sigma, to_plot_a$STACK, col = cols[3])#, pch = 17, cex = 1.75)
lines(to_plot_a$Sigma, to_plot_a$STACK, col = cols[3])
abline(h = raw_a, lty = 3, lwd = 2)
legend("bottomright", c("CF", "BART", "R-stack"),
lty = 1, col = cols, pch = 1 )# 15:17)#, pt.cex = 1.75, cex = 1.4)
par = pardef
dev.off()
to_plot_1
to_plot_a
library(ggplot2)
library(ggplot)
library(ggplot2)
to_plot_a %>% mutate(CF = CF + 1)
data.frame(to_plot_a)
help(pivot_longer)
library(dplyr)
help(pivot_longer)
library(tidyr)
help(pivot_longer)
data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE')
data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method')
raw_a
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method'))+
geom_point() +
geom_line() +
geom_abline(y=raw_a, lty = 2, linetype='dashed')
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method')) +
geom_point() +
geom_line() +
geom_abline(y=raw_a, lty = 2, linetype='dashed')
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method')) +
geom_point() +
geom_line() +
geom_hline(y=raw_a, lty = 2, linetype='dashed')
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method')) +
geom_point() +
geom_line() +
geom_hline(raw_a, lty = 2, linetype='dashed')
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method')) +
geom_point() +
geom_line() +
geom_hline(aes(y=raw_a, linetype='dashed'))
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method')) +
geom_point() +
geom_line() +
geom_hline(aes(yintercept=raw_a, linetype='dashed'))
# xlab('Uniform distribution quantiles') +
# ylab('Empirical quantiles') +
# labs(color='Method')
print(g)
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method')) +
geom_point() +
geom_line() +
geom_hline(aes(yintercept=raw_a, linetype='dashed'))
# xlab('Uniform distribution quantiles') +
# ylab('Empirical quantiles') +
# labs(color='Method')
print(g)
g
data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method')
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method')) +
geom_point() +
geom_line() +
geom_hline(aes(yintercept=raw_a, linetype='dashed'))
g
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method')) +
geom_point() +
geom_line() +
geom_hline(yintercept=raw_a, linetype='dashed')
# xlab('Uniform distribution quantiles') +
# ylab('Empirical quantiles') +
# labs(color='Method')
print(g)
rm(list = ls())
library(RColorBrewer)
library(latex2exp)
library(ggplot2)
library(dplyr)
library(tidyr)
# sigmas = c(0.25, 0.5, 0.75, 1, 1.5, 2, 3, 4)
sigmas <- c(0.25, 1, 2, 4)
in_use = 1:4
load("results/stacking_test.RData")
results_a = Reduce(rbind, lapply(all.results, rowMeans))
sd_a = Reduce(rbind, lapply(all.results, function(xx) apply(xx, 1, sd))) / sqrt(NREP)
load("results/stacking_test_B.RData")
results_b = Reduce(rbind, lapply(all.results, rowMeans))
sd_b = Reduce(rbind, lapply(all.results, function(xx) apply(xx, 1, sd))) / sqrt(NREP)
to_plot_a = data.frame(sigmas[in_use], sqrt(results_a[in_use, 2:4]))
names(to_plot_a) = c("Sigma", "CF", "BART", "STACK")
to_plot_b = data.frame(sigmas[in_use], sqrt(results_b[in_use, 2:4]))
names(to_plot_b) = c("Sigma", "CF", "BART", "STACK")
raw_a = sqrt(mean(results_a[,1]))
raw_b = sqrt(mean(results_b[,1]))
rng = range(c(to_plot_a[,2:4], to_plot_b[,2:4], raw_a, raw_b))
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method')) +
geom_point() +
geom_line() +
geom_hline(yintercept=raw_a, linetype='dashed')
# xlab('Uniform distribution quantiles') +
# ylab('Empirical quantiles') +
# labs(color='Method')
print(g)
ggsave(paste0('./figures_paper/elbow_global_null_validity.png'), width = 3.7, height = 2, unit = "in")
ggsave(paste0("figures/rstack_discontinuous.pdf"), width = 2.5, height = 2, unit = "in")
data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method')
g <- ggplot(
data=data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', color='Method')) +
geom_point() +
geom_line()
# geom_hline(yintercept=raw_a, linetype='dashed')
# xlab('Uniform distribution quantiles') +
# ylab('Empirical quantiles') +
# labs(color='Method')
print(g)
g <- ggplot(
data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', col='Method')) +
geom_point() +
geom_line()
# geom_hline(yintercept=raw_a, linetype='dashed')
# xlab('Uniform distribution quantiles') +
# ylab('Empirical quantiles') +
# labs(color='Method')
print(g)
data.frame(to_plot_a)
to_plot_a
as.data.frame(to_plot_a)
g <- ggplot(
as.data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', col='Method')) +
geom_point() +
geom_line()
# geom_hline(yintercept=raw_a, linetype='dashed')
# xlab('Uniform distribution quantiles') +
# ylab('Empirical quantiles') +
# labs(color='Method')
print(g)
temp <- as.data.frame(to_plot_a)
as.data.frame.table(to_plot_a)
to_plot_a
data.frame(t(to_plot_a))
dtype
type
typeof(to_plot_a)
do.call(rbind.data.frame, to_plot_a)
do.call(rbind.data.frame, t(to_plot_a))
to_plot_a[1]
to_plot_a[[1]]
matrix(to_plot_a)
matrix(unlist(to_plot_a))
bind_rows(to_plot_a)
temp <- bind_rows(to_plot_a)
bind_cols(to_plot_a)
data.frame(matrix(unlist(to_plot_a), ncol = max(lengths(to_plot_a)), byrow = TRUE))
names(to_plot_a)
data.frame(matrix(unlist(to_plot_a), ncol = max(lengths(to_plot_a)), byrow = TRUE), names=names(to_plot_a))
data.frame(matrix(unlist(to_plot_a), ncol = max(lengths(to_plot_a)), byrow = TRUE), header=names(to_plot_a))
data.frame(matrix(unlist(to_plot_a), ncol = max(lengths(to_plot_a)), byrow = TRUE), headers=names(to_plot_a))
do.call(rbind, lapply(to_plot_a, as.data.frame))
do.call(cbind, lapply(to_plot_a, as.data.frame))
sigmas[in_use]
data.frame(sigmas[in_use], sqrt(results_a[in_use, 2:4]))
temp <- do.call(cbind, lapply(to_plot_a, as.data.frame))
to_plot_a$Sigma
as.data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method')
g <- ggplot(
as.data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x='Sigma', y='RMSE', col='Method')) +
geom_point() +
geom_line()
# geom_hline(yintercept=raw_a, linetype='dashed')
# xlab('Uniform distribution quantiles') +
# ylab('Empirical quantiles') +
# labs(color='Method')
print(g)
ggsave(paste0("figures/rstack_discontinuous.pdf"), width = 2.5, height = 2, unit = "in")
g <- ggplot(
as.data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x=Sigma, y=RMSE, col=Method)) +
geom_point() +
geom_line()
# geom_hline(yintercept=raw_a, linetype='dashed')
# xlab('Uniform distribution quantiles') +
# ylab('Empirical quantiles') +
# labs(color='Method')
print(g)
ggsave(paste0("figures/rstack_discontinuous.pdf"), width = 2.5, height = 2, unit = "in")
g <- ggplot(
as.data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x=Sigma, y=RMSE, col=Method)) +
geom_point() +
geom_line() +
geom_hline(yintercept=raw_a, linetype='dashed')
print(g)
ggsave(paste0("figures/rstack_discontinuous.pdf"), width = 3, height = 2.5, unit = "in")
g <- ggplot(
as.data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x=Sigma, y=RMSE, col=Method)) +
geom_point() +
geom_line() +
geom_hline(yintercept=raw_a, linetype='dashed') +
labs(x='Noise') +
scale_x_log10() +
scale_y_log10()
print(g)
g
ggsave(paste0("figures/rstack_discontinuous.pdf"), width = 3, height = 2.5, unit = "in")
g <- ggplot(
as.data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x=Sigma, y=RMSE, col=Method)) +
geom_point() +
geom_line() +
geom_hline(yintercept=raw_a, linetype='dashed') +
labs(x='Noise') +
scale_x_log10() +
scale_y_log10()
print(g)
options(device = "RStudioGD")
g <- ggplot(
as.data.frame(to_plot_a) %>%
pivot_longer(cols=c('CF', 'BART', 'STACK'), values_to='RMSE', names_to='Method'),
aes(x=Sigma, y=RMSE, col=Method)) +
geom_point() +
geom_line() +
geom_hline(yintercept=raw_a, linetype='dashed')
print(g)
ggsave(paste0("figures/rstack_discontinuous.pdf"), width = 3, height = 2.5, unit = "in")
